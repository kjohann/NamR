@page "/compare/{ListId:guid}/{CompareId:guid}" 

@using NamR.Shared; 
@using NamR.Shared.Models; 
@using System.Linq;
@inject ListClient ListClient
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<NamR.Client.Components.Title 
    TitleText="Sammenlign lister"
    AdditionalLinkHref="@($"/list/{ListId}")"
    AdditionalLinkText="Din liste"
/>

@if (myItemsLookup.Values.Any(i => i.IsGirl) && HasComparisons(true))
{
    <h2>Jentenavn</h2>
    <div class="u--flex @GetNameListsClassNames(true)">
        <NamR.Client.Components.NameList
            TListModel=ListItemModel
            IsGirl="@true"
            Items="@(GetMyItems())"
            GetListIcon="@GetListIcon"
            RemoveOnClick="@OnRemove"
        />
        <NamR.Client.Components.NameList
            TListModel=CompareListItemModel
            IsGirl="@true"
            ItemClass="NameList--faded"
            Items="@(GetComparingItems())"
        />
    </div> }

@if (myItemsLookup.Values.Any(i => !i.IsGirl) && HasComparisons(false))
{
    <h2>Guttenavn</h2>
    <div class="u--flex @GetNameListsClassNames(false)">
        <NamR.Client.Components.NameList
            TListModel=ListItemModel
            IsGirl="@false"
            Items="@(GetMyItems())"
            GetListIcon="@GetListIcon"
            RemoveOnClick="@OnRemove"
        />
        <NamR.Client.Components.NameList
            TListModel=CompareListItemModel
            IsGirl="@false"
            ItemClass="NameList--faded"
            Items="@(GetComparingItems())"
        />
    </div> }

<NamR.Client.Components.AddNameForm ListId="@ListId" OnAdded="@AddItem" />

@code {
    [Parameter]
    public Guid ListId { get; set; }
    [Parameter]
    public Guid CompareId { get; set; }

    private Dictionary<string, ListItemModel> myItemsLookup { get; set; } = new Dictionary<string, ListItemModel>();
    private Dictionary<string, CompareListItemModel> comparingItemsLookup { get; set; } = new Dictionary<string, CompareListItemModel>();

    private string GetNameListsClassNames(bool isGirl)
    {
        var hasAny = myItemsLookup.Values.Any(i => i.IsGirl == isGirl);
        if (hasAny)
        {
            return HasComparisons(isGirl)
                ? string.Empty
                : "u--flexcentered";
        }

        return "u--flexcentered";
    }

    private string GetListIcon(ListItemModel item) => comparingItemsLookup.ContainsKey(item.Name)
        ? "😍"
        : string.Empty;

    private bool HasComparisons(bool isGirl) => comparingItemsLookup.Values.Any(i => i.IsGirl == isGirl);

    private void AddItem(ListItemModel model)
    {
        if (myItemsLookup.ContainsKey(model.Name))
        {
            return;
        }
        myItemsLookup.Add(model.Name, model);
        StateHasChanged();
    }

    private List<ListItemModel> GetMyItems() => myItemsLookup.Values
        .OrderByDescending(i => comparingItemsLookup.ContainsKey(i.Name))
        .ThenBy(i => i.Name, StringComparer.CurrentCulture)
        .ToList();
    
    private List<CompareListItemModel> GetComparingItems() => comparingItemsLookup.Values
        .OrderByDescending(i => myItemsLookup.ContainsKey(i.Name))
        .ThenBy(i => i.Name, StringComparer.CurrentCulture)
        .ToList();

    private async Task OnRemove(IListItemModel item)
    {
        var actualItem = (ListItemModel)item;
        myItemsLookup.Remove(actualItem.Name);
        await ListClient.RemoveItem(actualItem.ListIdentifier, actualItem.Id);
        StateHasChanged();
    }

    protected async override Task OnParametersSetAsync()
    {
        await localStorage.SetItemAsync(Constants.CompareIdLocalStorageKey, CompareId);
        myItemsLookup = (await ListClient.GetList(ListId)).ToDictionary(i => i.Name);
        comparingItemsLookup = (await ListClient.GetListForComparing(CompareId)).ToDictionary(i => i.Name);
    }
}
