@page "/list/{ListId:guid}" 

@using NamR.Shared; 
@using NamR.Shared.Models; 
@using System.Linq; 
@inject ListClient ListClient

<h1>Min navneliste</h1>

<div>
    <ul>
        @foreach (var item in items)
        {
            <li>
                @item.Name som er en @(item.IsGirl ? "jente" : "gutt")
                <button @onclick="@(() => OnRemove(item))">Fjern</button>
            </li>
        }
    </ul>
</div>

<div>
    <EditForm EditContext="@editContext" OnSubmit="@OnSubmit">
        <label for="name-input">Navn</label>
        <InputText id="name-input" @bind-Value="newItem.Name" />
        <label for="is-girl-check">Jente?</label>
        <InputCheckbox id="is-girl-check" @bind-Value="newItem.IsGirl" />
        <button type="submit">Legg til navn</button>
    </EditForm>
</div>

@code {
    [Parameter]
    public Guid ListId { get; set; }

    private NewListItemModel newItem = new NewListItemModel();
    private EditContext editContext;
    private List<ListItemModel> items { get; set; } = new List<ListItemModel>();

    protected async override Task OnInitializedAsync()
    {
        editContext = new EditContext(newItem);
        items = (await ListClient.GetList(ListId)).ToList();
    }

    private async Task OnSubmit()
    {
        if (string.IsNullOrWhiteSpace(newItem.Name))
        {
            return;
        }
        newItem.ListIdentifier = ListId;
        var result = await ListClient.AddItem(newItem);
        newItem = new NewListItemModel();
        items.Add(result);
    }

    private async Task OnRemove(ListItemModel item)
    {
        items.Remove(item);
        await ListClient.RemoveItem(item.Id);
    }
}
