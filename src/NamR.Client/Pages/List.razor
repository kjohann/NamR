@page "/list/{ListId:guid}" 

@using NamR.Shared; 
@using NamR.Shared.Models; 
@using System.Linq;
@inject ListClient ListClient
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<NamR.Client.Components.Title 
    TitleText="@GetTitle()"
    AdditionalLinkHref="@comparePageHref"
    AdditionalLinkText="Sammenlign lister"
/>

<div class="u--flex @GetNameListsClassNames()">
    <NamR.Client.Components.NameList
        TListModel=ListItemModel
        IsGirl="@true"
        Items="@items"
        Title="Jentenavn"
        RemoveOnClick="@OnRemove"
    />
    <NamR.Client.Components.NameList
        TListModel=ListItemModel
        IsGirl="@false"
        Items="@items"
        Title="Guttenavn"
        RemoveOnClick="@OnRemove"
    />
</div>

<NamR.Client.Components.AddNameForm ListId="@ListId" OnAdded="@AddItem" />

@code {
    [Parameter]
    public Guid ListId { get; set; }

    private string? comparePageHref;

    private List<ListItemModel> items { get; set; } = new List<ListItemModel>();

    private string GetTitle() => items.Select(i => i.IsGirl).Distinct().Count() == 1
        ? items.FirstOrDefault(i => i.IsGirl) != null ? "Min jentenavnliste" : "Min guttenavnliste"
        : "Min navneliste";
    private string GetNameListsClassNames() =>
        items.Select(i => i.IsGirl).Distinct().Count() == 1 ? "u--flexcentered" : string.Empty;

    protected async override Task OnParametersSetAsync()
    {
        await localStorage.SetItemAsync(Constants.ListIdLocalStorageKey, ListId);
        items = (await ListClient.GetList(ListId)).ToList();
        var compareId = await localStorage.GetItemAsync<Guid?>(Constants.CompareIdLocalStorageKey);
        if (compareId.HasValue)
        {
            comparePageHref = $"/compare/{ListId}/{compareId}";
        }
    }

    private void AddItem(ListItemModel model)
    {
        if (items.Any(i => i.Name == model.Name))
        {
            return;
        }
        items.Add(model);
        StateHasChanged();
    }

    private async Task OnRemove(IListItemModel item)
    {
        var actualItem = (ListItemModel)item;
        items.Remove(actualItem);
        await ListClient.RemoveItem(actualItem.ListIdentifier, actualItem.Id);
        StateHasChanged();
    }
}
